#Problem 3-2
#16.0/16.0 points (graded)
# Paste your code here
def oneTrial():
    '''
    Simulates one trial of drawing 3 balls out of a bucket containing
    3 red and 3 green balls. Balls are not replaced once
    drawn. Returns True if all three balls are the same color,
    False otherwise.
    '''
    balls = ['r', 'r', 'r', 'g', 'g', 'g','r','g']
    chosenBalls = []
    for t in range(3):
        # For three trials, pick a ball
        ball = random.choice(balls)
        # Remove the chosen ball from the set of balls
        balls.remove(ball)
        # and add it to a list of balls we picked
        chosenBalls.append(ball)
    # If the first ball is the same as the second AND the second is the same as the third,
    #  we know all three must be the same color.
    if chosenBalls[0] == chosenBalls[1] and chosenBalls[1] == chosenBalls[2]:
        return True
    return False

def drawing_without_replacement_sim(numTrials):
    '''
    Runs numTrials trials of a Monte Carlo simulation
    of drawing 3 balls out of a bucket containing
    4 red and 4 green balls. Balls are not replaced once
    drawn. Returns a float - the fraction of times 3 
    balls of the same color were drawn in the first 3 draws.
    '''
    numTrue = 0
    for trial in range(numTrials):
        if oneTrial():
            numTrue += 1

    return float(numTrue)/float(numTrials)

#Problem 4-1
#10.0/10.0 points (graded)
# Paste your code here
def makeHistogram(values, numBins, xLabel, yLabel, title=None):
    """
      - values, a sequence of numbers
      - numBins, a positive int
      - xLabel, yLabel, title, are strings
      - Produces a histogram of values with numBins bins and the indicated labels
        for the x and y axis
      - If title is provided by caller, puts that title on the figure and otherwise
        does not title the figure
    """
    # TODO
    
    pylab.hist(values, numBins)
    pylab.xlabel(xLabel)
    pylab.ylabel(yLabel)
    if title != None:
        pylab.title(title)
    pylab.show()

#Problem 4-2
#20.0/20.0 points (graded)
def longRun(run):
    prev = run[0]
    count = 0
    prevCount = 0
    indx = 0
    prevIndex = indx
    for i in run[1:]:
       # print(i,'indx =', indx, end = '\t')
        if i == prev:
            count += 1
            if count > prevCount:
                prevCount = count
                
        else:
            if count == prevCount:
                prevIndex = indx-count
            count = 0
            prev = i
            #prevIndex = indx
        indx += 1
    return run[prevIndex:prevIndex+prevCount+1]

def expectedmean(L):
    l_dict = {}
    for i in L:
        if not(i in l_dict.keys()):
            l_dict[i] = 1/len(L)
        else:
            l_dict[i] += 1/len(L)
    mean = 0
    for i in l_dict.keys():
        mean += i*l_dict[i]
    
    return mean

def getAverage(die, numRolls, numTrials):
    """
      - die, a Die
      - numRolls, numTrials, are positive ints
      - Calculates the expected mean value of the longest run of a number
        over numTrials runs of numRolls rolls.
      - Calls makeHistogram to produce a histogram of the longest runs for all
        the trials. There should be 10 bins in the histogram
      - Choose appropriate labels for the x and y axes.
      - Returns the mean calculated
    """
    # TODO
    #longestRun = []
    allRuns = []
    run = []
    for trial in range(numTrials):
        
        for rolls in range(numRolls):
            run.append(die.roll())

        allRuns.append(len(longRun(run)))
        run = []
    mean = 0    
    if allRuns == []:
        mean = 0
    else:
        mean = getMeanAndStd(allRuns)[0]


    makeHistogram(allRuns, 10, 'roll outcome', 'times in longest run')
    return round(mean,3)


#Problem 6
#20.0/20.0 points (graded)
import numpy as np
def getBinary(num, n):
    '''
    num: a decimal number
    n: length of 
    returns: a numpy array of binary number that collectively represent num 
    '''
    binary = bin(num)
    binary = list(binary)
    binary.remove(binary[0])
    binary.remove(binary[0])
    binary = list(map(int,binary))
    if len(binary) == n:
        return np.array(binary)
    elif len(binary) < n:
        for i in range(n-len(binary)):
            binary = [0]+binary
        return np.array(binary)
    else:
        raise Exception

def sumExists(binary, toBinary, choices, total):
    final = [binary]
    n=len(choices)
    while True:
        try:
            toBinary += 1
            binary = getBinary(toBinary, n)
            if sum(binary*np.array(choices)) == total:
                final.append(binary)
        except:
            break
    result = final[0]
    least = sum(final[0])
    for i in final[1:]:
        if sum(i) < least:
            result = i
    return np.array(result)

def sumDoesnotExist(final, choices, total):
    
    least = abs(sum(final[0]*np.array(choices)) - total)
    result = final[0]
    for binaries in final:
        addition = sum(binaries*np.array(choices))
        if abs(addition-total) < least and addition < total:
            result = binaries
            least = abs(sum(binaries*np.array(choices)) - total)
    return result

def find_combination(choices, total):
    """
    choices: a non-empty list of ints
    total: a positive int
 
    Returns result, a numpy.array of length len(choices) 
    such that
        * each element of result is 0 or 1
        * sum(result*choices) == total
        * sum(result) is as small as possible
    In case of ties, returns any result that works.
    If there is no result that gives the exact total, 
    pick the one that gives sum(result*choices) closest 
    to total without going over.
    """
    toBinary = 0
    binary = getBinary(toBinary, len(choices))
    final = []
    while True:
        try:
            final.append(binary)
            toBinary +=1
            if sum(binary*np.array(choices)) == total:
                return sumExists(binary, toBinary, choices, total)
            binary = getBinary(toBinary, len(choices))
        except:
            return sumDoesnotExist(final, choices, total)


#Problem 8 Part A
# Enter the code for the functions rabbitGrowth, foxGrowth, and runSimulation
# in this box.
def rabbitGrowth():
    """ 
    rabbitGrowth is called once at the beginning of each time step.
    It makes use of the global variables: CURRENTRABBITPOP and MAXRABBITPOP.
    The global variable CURRENTRABBITPOP is modified by this procedure.
    For each rabbit, based on the probabilities in the problem set write-up, 
      a new rabbit may be born.
    Nothing is returned.
    """
    # you need this line for modifying global variables
    global CURRENTRABBITPOP
    global MAXRABBITPOP
    rabs = CURRENTRABBITPOP
    for i in range(rabs):
        reproduceProb = 1- CURRENTRABBITPOP/MAXRABBITPOP
        if random.random() < reproduceProb:
            CURRENTRABBITPOP += 1

def foxGrowth():
    """ 
    foxGrowth is called once at the end of each time step.
    It makes use of the global variables: CURRENTFOXPOP and CURRENTRABBITPOP,
    and both may be modified by this procedure.
    Each fox, based on the probabilities in the problem statement, may eat 
    one rabbit (but only if there are more than 10 rabbits).
    If it eats a rabbit, then with a 1/3 prob it gives birth to a new fox.
    If it does not eat a rabbit, then with a 1/10 prob it dies.
    Nothing is returned.
    """
    # you need these lines for modifying global variables
    global CURRENTRABBITPOP
    global CURRENTFOXPOP
    global MAXRABBITPOP
    foxx = CURRENTFOXPOP
    for i in range(foxx):
        if CURRENTRABBITPOP > 10:
    
            if random.random() < CURRENTRABBITPOP/MAXRABBITPOP:
                CURRENTRABBITPOP -= 1
                if random.random() < 1/3:
                    CURRENTFOXPOP += 1
            else:
                if CURRENTFOXPOP >10:
                    if random.random() < 1/10:
                        CURRENTFOXPOP -= 1
        else:
            pass

def runSimulation(numSteps):
    """
    Runs the simulation for `numSteps` time steps.
    Returns a tuple of two lists: (rabbit_populations, fox_populations)
      where rabbit_populations is a record of the rabbit population at the 
      END of each time step, and fox_populations is a record of the fox population
      at the END of each time step.
    Both lists should be `numSteps` items long.
    """
    global CURRENTRABBITPOP
    global CURRENTFOXPOP
    global MAXRABBITPOP
    timestep = range(numSteps)
    foxPop, rabbitPop = [], []
    for i in range(numSteps):
        rabbitGrowth()
        foxGrowth()
        foxPop.append(CURRENTFOXPOP)
        rabbitPop.append(CURRENTRABBITPOP)
    return (rabbitPop, foxPop)


#Problem 8 Part B
#################
